using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using ProfitWell.Enum;
using ProfitWell.Helpers;
using System;

namespace ProfitWell.Models
{
    public class CreateSubscriptionRequestModel
    {
        /// <summary>
        /// The UserId. Do not include this field if you are creating a user's first subscription. 
        /// The UserId is automatically generated by ProfitWell for any new users. 
        /// Only include this field if you are referencing an existing user for whom you need to create an additional subscription. - Optional
        /// </summary>
        [JsonProperty("user_id", NullValueHandling = NullValueHandling.Ignore)]
        public string UserId { get; set; }
        /// <summary>
        /// If you wish, you can include your own identifier here so that you have a handle by which to 
        /// refer to this user in subsequent requests. An advantage of using your own identifier is 
        /// that you do not have to store the ProfitWell-generated UserIds in your database. If you 
        /// are creating a second subscription for a user, you will need to use either the UserId or 
        /// UserAlias fields when making this request so that we know which user you're referring to. - Optional
        /// </summary>
        [JsonProperty("user_alias", NullValueHandling = NullValueHandling.Ignore)]
        public string UserAlias { get; set; }
        /// <summary>
        /// SubscriptionAlias - If you wish, you can include your own identifier here so that you have a handle by which
        /// to refer to this subscription in subsequent requests. An advantage of using your own identifier is that you do not have to store the 
        /// ProfitWell-generated subscription_ids in your database. In the future, if you need to update this subscription, you will need to use
        /// either the subscription_id or subscription_alias fields when making the update request so that we know which subscription you're referring to. 
        /// Note that the subscription_alias must be unique across all users in your company, if you decide to provide one. - Optional
        /// </summary>
        [JsonProperty("subscription_alias", NullValueHandling = NullValueHandling.Ignore)]
        public string SubscriptionAlias { get; set; }
        /// <summary>
        /// Email - The email address of the user. (This can actually be any sort of text, not necessarily an email address. Some prefer to store a 
        /// name here instead.) This will be the display text that is used on the Customers tab. This field does not uniquely identify a user.
        /// </summary>
        [JsonProperty("email")]
        public string Email { get; set; }
        /// <summary>
        /// PlanId - The ID of the plan that the user is on. For the sake of consistency (and the ability to later segment your data), 
        /// this name should be consistent across everyone who is on this plan.
        /// </summary>
        [JsonProperty("plan_id")]
        public string PlanId { get; set; }
        /// <summary>
        /// PlanInterval - The billing cycle for this plan. The two options are "month" and "year".
        /// </summary>
        [JsonProperty("plan_interval")]
        [JsonConverter(typeof(StringEnumConverter))]
        public PlanInterval PlanInterval { get; set; }
        /// <summary>
        /// PlanCurrency  - The currency in which users of this plan are charged. The default currency is usd (United States Dollars).
        /// We accept the following ISO 4217 Currency Codes: aed, afn, all, amd, ang, aoa, ars, aud, awg, azn, bam, bbd, bdt, bgn, bhd, bif, bmd, bnd, bob,
        /// brl, bsd, btc, btn, bwp, bzd, cad, cdf, chf, clf, clp, cny, cop, crc, cup, cve, czk, djf, dkk, dop, dzd, egp, ern, etb, eur, fjd, fkp, gbp, gel,
        /// ghs, gip, gmd, gnf, gtq, gyd, hkd, hnl, hrk, htg, huf, idr, ils, inr, iqd, irr, isk, jep, jmd, jod, jpy, kes, kgs, khr, kmf, kpw, krw, kwd, kyd,
        /// kzt, lak, lbp, lkr, lrd, lsl, lyd, mad, mdl, mga, mkd, mmk, mnt, mop, mro, mur, mvr, mwk, mxn, myr, mzn, nad, ngn, nio, nok, npr, nzd, omr, pab,
        /// pen, pgk, php, pkr, pln, pyg, qar, ron, rsd, rub, rwf, sar, sbd, scr, sdg, sek, sgd, shp, sll, sos, srd, std, svc, syp, szl, thb, tjs, tmt, tnd,
        /// top, try, ttd, twd, tzs, uah, ugx, usd, uyu, uzs, vef, vnd, vuv, wst, xaf, xag, xau, xcd, xdr, xof, xpf, yer, zar, zmw, zwl. - Optional
        /// </summary>
        [JsonProperty("plan_currency", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CurrencySymbol PlanCurrency { get; set; }
        /// <summary>
        /// Status - The status of the subscription. Currently, the acceptable values for new subscriptions are "active" and "trialing". Down the line, we would
        /// like to add more statuses. If you do not provide a status, it will be assumed to be "active". Subscriptions that are trialing must have a status of
        /// "trialing" and a value of 0. (Note that the API may return statuses other than "active" and "trialing" when retrieving a customer's subscription history,
        /// such as "churned_voluntary" and "churned_delinquent".) - Optional
        /// </summary>
        [JsonProperty("status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public Status Status { get; set; }
        /// <summary>
        /// Price - The amount that you bill your user, per billing period, in cents. Keep the value of annual plans unmodified, meaning a $120.00 / year plan
        /// should have a value of 12000.
        /// </summary>
        [JsonProperty("value")]
        [JsonConverter(typeof(PriceConverter))]
        public decimal Price { get; set; }
        /// <summary>
        /// EffectiveDate - The date that the subscription starts, in UNIX timestamp format. (E.g. For 2018-01-01, the value would be 1514764800).
        /// </summary>
        [JsonProperty("effective_date")]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.UnixDateTimeConverter))]
        public DateTime EffectiveDate { get; set; }
        /// <summary>
        /// DataProviderUserId - At some point down the line, we will use this to associate a manually-added user with a user from your account's
        /// data provider. For example, if you use Stripe, and you would like to record a second subscription for a Stripe user that is managed outside of Stripe itself, 
        /// you could provide that Stripe User ID in this field (e.g. cus_A75fBhseE80). Note that we do not currently use this field. - Optional
        /// </summary>
        [JsonProperty("data_provider_user_id", NullValueHandling = NullValueHandling.Ignore)]
        public string DataProviderUserId { get; set; }
    }
}
